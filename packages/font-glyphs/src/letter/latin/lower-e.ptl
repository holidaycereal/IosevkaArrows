$$include '../../meta/macros.ptl'

import [mix linreg clamp fallback] from "@iosevka/util"
import [DependentSelector] from "@iosevka/glyph/relation"

glyph-module

glyph-block Letter-Latin-Lower-E : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Letter-Shared : CreateSelectorVariants DefineSelectorGlyph CreateTurnedLetter
	glyph-block-import Letter-Shared-Shapes : FlatHookDepth RetroflexHook RhoticHookShape
	glyph-block-import Letter-Shared-Shapes : SerifedArcEnd InwardSlabArcEnd ArcEndSerif
	glyph-block-import Mark-Shared-Metrics : markExtend markStroke markStress markFine
	glyph-block-import Mark-Above : aboveMarkTop aboveMarkBot aboveMarkMid aboveMarkStack
	glyph-block-import Mark-Adjustment : ExtendBelowBaseAnchors
	glyph-block-import Letter-Latin-C : CConfig

	define [SmallEHook top stroke hook doSwash] : Math.min hook : if doSwash top : mix stroke (top * DesignParameters.eBarPos - stroke / 2) 0.554

	define SLAB-NONE       0
	define SLAB-CLASSICAL  1
	define SLAB-INWARD     2

	define [SmallESerifedTerminalShape df top stroke hook tailSlab isStart] : match tailSlab
		[Just SLAB-CLASSICAL] : SerifedArcEnd.LtrLhs df.rightSB 0 stroke hook
		[Just SLAB-INWARD] : InwardSlabArcEnd.LtrLhs df.rightSB 0 stroke hook
		__ : list
			hookend 0 (sw -- stroke) (suppressSwash -- isStart)
			g4 (df.rightSB - [if (!isStart && para.isItalic && (para.slopeAngle > 0)) 0 0.5] * OX) [SmallEHook top stroke hook (!isStart && para.isItalic && (para.slopeAngle > 0))]

	define [RevSmallESerifedTerminalShape df top stroke hook tailSlab isStart] : match tailSlab
		[Just SLAB-CLASSICAL] : SerifedArcEnd.RtlRhs df.leftSB 0 stroke hook
		[Just SLAB-INWARD] : InwardSlabArcEnd.RtlRhs df.leftSB 0 stroke hook
		__ : list
			hookend 0 (sw -- stroke) (suppressSwash -- isStart)
			g4 (df.leftSB + [if (!isStart && para.isItalic && (para.slopeAngle < 0)) 0 0.5] * OX) [SmallEHook top stroke hook (!isStart && para.isItalic && (para.slopeAngle < 0))]

	define [SmallETerminalSerif df top stroke hook tailSlab isStart] : match tailSlab
		[Just SLAB-CLASSICAL] : ArcEndSerif.R       df.rightSB 0 stroke hook
		[Just SLAB-INWARD]    : ArcEndSerif.InwardR df.rightSB 0 stroke hook
		__ : no-shape

	define [RevSmallETerminalSerif df top stroke hook tailSlab isStart] : match tailSlab
		[Just SLAB-CLASSICAL] : ArcEndSerif.L       df.leftSB 0 stroke hook
		[Just SLAB-INWARD]    : ArcEndSerif.InwardL df.leftSB 0 stroke hook
		__ : no-shape

	define flex-params [SmallEShape] : glyph-proc
		local-parameter : df
		local-parameter : top
		local-parameter : stroke   -- [AdviceStroke2 2 3 top]
		local-parameter : hook     -- AHook
		local-parameter : bbd      -- 0
		local-parameter : ada      -- SmallArchDepthA
		local-parameter : adb      -- SmallArchDepthB
		local-parameter : styTop   -- nothing
		local-parameter : styBot   -- nothing
		local-parameter : turned   -- false

		local tailSlab : if turned styTop styBot
		local cw : turned && (styTop != nothing)

		local barBottom : top * DesignParameters.eBarPos - (stroke / 2)

		include : HBar.b ((df.leftSB + OX) + (stroke / 2) + bbd) ((df.rightSB - OX) - (stroke / 2)) barBottom stroke
		local path : include : dispiro
			widths.lhs stroke
			flat (df.rightSB - OX) barBottom [heading Upward]
			curl (df.rightSB - OX) (top - adb)
			arch.lhs top (sw -- stroke)
			flatside.ld df.leftSB 0 top ada adb
			SmallESerifedTerminalShape df top stroke hook tailSlab cw

		include : SmallETerminalSerif df top stroke hook tailSlab cw

		if turned : include : FlipAround df.middle (top / 2)

		return path.rhsKnots.[path.rhsKnots.length - 1]

	define flex-params [RevSmallEShape] : glyph-proc
		local-parameter : df
		local-parameter : top
		local-parameter : stroke   -- [AdviceStroke2 2 3 top]
		local-parameter : hook     -- AHook
		local-parameter : ada      -- SmallArchDepthA
		local-parameter : adb      -- SmallArchDepthB
		local-parameter : styTop   -- nothing
		local-parameter : styBot   -- nothing
		local-parameter : turned   -- false

		local tailSlab : if turned styTop styBot
		local ccw : turned && (styTop != nothing)

		local barBottom : top * DesignParameters.eBarPos - (stroke / 2)

		include : HBar.b ((df.leftSB + OX) + (stroke / 2)) ((df.rightSB - OX) - (stroke / 2)) barBottom stroke
		include : dispiro
			widths.rhs stroke
			flat (df.leftSB + OX) barBottom [heading Upward]
			curl (df.leftSB + OX) (top - ada)
			arch.rhs top (sw -- stroke)
			flatside.rd df.rightSB 0 top ada adb
			RevSmallESerifedTerminalShape df top stroke hook tailSlab ccw

		include : RevSmallETerminalSerif df top stroke hook tailSlab ccw

		if turned : include : FlipAround df.middle (top / 2)

	define flex-params [SmallERoundedShape] : glyph-proc
		local-parameter : df
		local-parameter : top
		local-parameter : stroke   -- [AdviceStroke2 2 3 top]
		local-parameter : hook     -- AHook
		local-parameter : ada      -- SmallArchDepthA
		local-parameter : adb      -- SmallArchDepthB
		local-parameter : styTop   -- nothing
		local-parameter : styBot   -- nothing
		local-parameter : turned   -- false

		local tailSlab : if turned styTop styBot
		local cw : turned && (styTop != nothing)

		local barBottom : top * (DesignParameters.eBarPos * [if para.isItalic 1 0.95]) - (stroke / 2)
		local xStart : df.leftSB + [HSwToV : 0.125 * stroke]
		local extraCurliness : if para.isItalic (0.1 * (top - barBottom)) 0
		local ada2 : ArchDepthAOf : (1 - DesignParameters.eBarPos) * SmallArchDepth
		local adb2 : ArchDepthBOf : (1 - DesignParameters.eBarPos) * SmallArchDepth
		local path : include : dispiro
			widths.lhs stroke
			[if para.isItalic g2 flat] xStart (barBottom + (2/3) * extraCurliness)
			[if para.isItalic g2.right.mid curl] [mix xStart df.rightSB (0.475 + 0.1 * TanSlope)] (barBottom - (1/3) * extraCurliness) [if (para.isItalic && (para.slopeAngle > 0)) null [heading Rightward]]
			if (para.isItalic && (para.slopeAngle > 0)) {} { [archv] }
			g4 (df.rightSB - OX) [YSmoothMidR top barBottom ada2 adb2]
			arch.lhs top (sw -- stroke)
			flatside.ld df.leftSB 0 top ada adb
			SmallESerifedTerminalShape df top stroke hook tailSlab cw

		include : SmallETerminalSerif df top stroke hook tailSlab cw

		if turned : include : FlipAround df.middle (top / 2)

		return path.rhsKnots.[path.rhsKnots.length - 1]

	define flex-params [RevSmallERoundedShape] : glyph-proc
		local-parameter : df
		local-parameter : top
		local-parameter : stroke   -- [AdviceStroke2 2 3 top]
		local-parameter : hook     -- AHook
		local-parameter : ada      -- SmallArchDepthA
		local-parameter : adb      -- SmallArchDepthB
		local-parameter : styTop   -- nothing
		local-parameter : styBot   -- nothing
		local-parameter : turned   -- false

		local tailSlab : if turned styTop styBot
		local ccw : turned && (styTop != nothing)

		local barBottom : top * (DesignParameters.eBarPos * [if para.isItalic 1 0.95]) - (stroke / 2)
		local xStart : df.rightSB - [HSwToV : 0.125 * stroke]
		local extraCurliness : if para.isItalic (0.1 * (top - barBottom)) 0
		local ada2 : ArchDepthAOf : (1 - DesignParameters.eBarPos) * SmallArchDepth
		local adb2 : ArchDepthBOf : (1 - DesignParameters.eBarPos) * SmallArchDepth
		include : dispiro
			widths.rhs stroke
			[if para.isItalic g2 flat] xStart (barBottom + (2/3) * extraCurliness)
			[if para.isItalic g2.left.mid curl] [mix xStart df.leftSB (0.475 - 0.1 * TanSlope)] (barBottom - (1/3) * extraCurliness) [if (para.isItalic && (para.slopeAngle < 0)) null [heading Leftward]]
			if (para.isItalic && (para.slopeAngle < 0)) {} { [archv] }
			g4 (df.leftSB + OX) [YSmoothMidL top barBottom ada2 adb2]
			arch.rhs top (sw -- stroke)
			flatside.rd df.rightSB 0 top ada adb
			RevSmallESerifedTerminalShape df top stroke hook tailSlab ccw

		include : RevSmallETerminalSerif df top stroke hook tailSlab ccw

		if turned : include : FlipAround df.middle (top / 2)

	define flex-params [AbkCheShape] : glyph-proc
		local-parameter : fDesc
		local-parameter : Body
		local-parameter : df
		local-parameter : top
		local-parameter : stroke   -- [Math.min df.mvs : AdviceStroke2 2 3 top]
		local-parameter : hook     -- AHook
		local-parameter : ada      -- SmallArchDepthA
		local-parameter : adb      -- SmallArchDepthB
		local-parameter : styTop   -- nothing
		local-parameter : styBot   -- nothing

		local gap : 0.375 * (df.width - 2 * df.leftSB - 2.5 * stroke) - [HSwToV : 0.25 * stroke]
		define divSub : (df.width - gap - stroke) / Width
		define subDf : DivFrame divSub 2
		include : Body subDf top
			stroke   -- stroke
			hook     -- hook
			ada      -- (ada * 0.7 * df.adws)
			adb      -- (adb * 0.7 * df.adws)
			styTop   -- styTop
			styBot   -- styBot
		define shift : Width * (df.adws - divSub)
		if fDesc : begin
			local desc : (-LongVJut) + QuarterStroke
			include : ExtendBelowBaseAnchors desc
			include : difference
				VBar.m subDf.middle desc (O + stroke) (VJutStroke * (subDf.mvs / Stroke))
				OShapeOutline.NoOvershoot top 0 subDf.leftSB subDf.rightSB stroke
		include : Translate shift 0

		local hd : FlatHookDepth df
		local barBottom : top * DesignParameters.eBarPos - (stroke / 2)
		include : intersection [MaskLeft : subDf.leftSB + shift] : dispiro
			widths.lhs stroke
			flat (df.leftSB - [HSwToV : 0.25 * stroke]) (barBottom + Hook) [heading Downward]
			curl (df.leftSB - [HSwToV : 0.25 * stroke]) (barBottom + [Math.min Hook hd.y] - 0.25 * stroke) [heading Downward]
			arcvh
			flat [Math.min (df.leftSB + hd.x - [HSwToV : 0.5 * stroke]) (subDf.leftSB + shift)] barBottom
			curl (subDf.middle + shift) barBottom

	glyph-block-export SmallEConfig
	define SmallEConfig : object
		flatCrossbar { SmallEShape        RevSmallEShape        }
		rounded      { SmallERoundedShape RevSmallERoundedShape }

	foreach { suffix { Body RevBody } } [Object.entries SmallEConfig] : do
		create-glyph "e.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : Body [DivFrame 1] XH
				hook -- AHook
				ada  -- SmallArchDepthA
				adb  -- SmallArchDepthB

		create-glyph "eOgonek.\(suffix)" : glyph-proc
			include : MarkSet.e
			local lastKnot : include : Body [DivFrame 1] XH
				hook -- AHook
				ada  -- SmallArchDepthA
				adb  -- SmallArchDepthB
			include : refer-glyph 'ogonekTR/spacer'

			# Connected Ogonek shape
			local fine : AdviceStroke 8
			local depth : (-Descender) - markStroke
			local extL : (7 / 16) * depth + 0.25 * markStress
			local extR : Math.max (0.0625 * markExtend) (TanSlope * (1.5 * markStroke))
			local beginCoSlope : if para.isItalic 0.2 0

			set-base-anchor 'trailing' (RightSB + extR) ((-depth) + 0.5 * O - markStroke)
			set-base-anchor 'belowBraceL' (RightSB - extL - [HSwToV : 0.25 * markStroke]) ((-0.75) * depth)
			set-base-anchor 'belowBraceR' (RightSB - 0.75 * extL) ((-0.75) * depth)

			local turnSlope : 0.5 * ((markStroke - fine) / markStroke - (ArchDepthB - ArchDepth) / ArchDepth)

			include : intersection
				MaskBelow lastKnot.y
				dispiro
					g4 lastKnot.x lastKnot.y [widths.rhs fine]
					g4 (lastKnot.x - beginCoSlope * TINY) (lastKnot.y - TINY)
					alsoThruThem.computed { (1/3) (2/3) } : object
						rx       : function [rt] rt
						deltaX   : function [rt] 0
						ry       : function [rt] : (11/48) + (5/8) * rt
						deltaY   : function [rt] : (-0.25) * [mix fine markStroke rt]
						modifier : function [rt] : widths.rhs [mix fine markStroke : rt ** 2]
					g4.down.mid (RightSB - extL) ((-0.75) * depth) [widths.rhs.heading markStroke {.x HVContrast .y turnSlope}]
					arcvh [widths.rhs markStroke]
					g4 (RightSB + [mix (-extL) (+extR) (11/16)]) ((-depth) + O) [heading Rightward]
					g4 (RightSB + extR) ((-depth) + 0.5 * O) [heading Rightward]

		create-glyph "eWithNotch.\(suffix)" : glyph-proc
			include : MarkSet.e
			local lastKnot : include : Body [DivFrame 1] XH
				hook -- AHook
				ada  -- SmallArchDepthA
				adb  -- SmallArchDepthB
			local sw : AdviceStroke 4
			local ry : Math.min (lastKnot.y - sw) (XH * 0.08)
			local rx : Math.min ry
			include : dispiro
				g4.down.start lastKnot.x lastKnot.y [widths.rhs sw]
				arcvh
				g4 (lastKnot.x + rx) (lastKnot.y - ry + O)
				archv
				g4.up.end (lastKnot.x + rx * 2) lastKnot.y

		create-glyph "eRetroflexHook.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : Body [DivFrame 1] XH
				hook -- AHook
				ada  -- SmallArchDepthA
				adb  -- SmallArchDepthB
				styBot -- SLAB-CLASSICAL
			include : RetroflexHook.r
				x -- RightSB
				y -- 0
				yAttach -- DToothlessRise

		create-glyph "eRev.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : RevBody [DivFrame 1] XH
				hook -- AHook
				ada  -- SmallArchDepthA
				adb  -- SmallArchDepthB

		create-glyph "eBar.\(suffix)" : glyph-proc
			include [refer-glyph "e.\(suffix)"] AS_BASE ALSO_METRICS
			local yBar : mix Stroke (XH * DesignParameters.eBarPos - HalfStroke) 0.5
			include : HBar.m [mix SB 0 0.7] [mix RightSB Width 0.7] yBar [Math.min (yBar - Stroke) : AdviceStroke 5]

		DefineSelectorGlyph "Schwa" suffix [DivFrame 1] 'capital'
		DefineSelectorGlyph "schwa" suffix [DivFrame 1] 'e'

		define rhoticDf : DivFrame para.advanceScaleM 1

		DefineSelectorGlyph "schwaRhoticHook"    suffix rhoticDf 'e'
		DefineSelectorGlyph "schwaRetroflexHook" suffix rhoticDf 'e'

		define abkCheDf : DivFrame para.advanceScaleM 3

		DefineSelectorGlyph "cyrl/abk/Che"          suffix abkCheDf 'capital'
		DefineSelectorGlyph "cyrl/abk/che"          suffix abkCheDf 'e'
		DefineSelectorGlyph "cyrl/abk/CheDescender" suffix abkCheDf 'capDesc'
		DefineSelectorGlyph "cyrl/abk/cheDescender" suffix abkCheDf 'p'

		foreach { suffixSerif { styTop styBot } } [Object.entries CConfig] : do
			create-glyph "Schwa.\(suffix).\(suffixSerif)" : glyph-proc
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				include : Body [DivFrame 1] CAP
					hook   -- Hook
					ada    -- ArchDepthA
					adb    -- ArchDepthB
					turned -- true
					styTop -- styTop
					styBot -- styBot
			create-glyph "schwa.\(suffix).\(suffixSerif)" : glyph-proc
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				include : Body [DivFrame 1] XH
					hook   -- AHook
					ada    -- SmallArchDepthA
					adb    -- SmallArchDepthB
					turned -- true
					styTop -- styTop
					styBot -- styBot

			create-glyph "schwaRhoticHook.\(suffix).\(suffixSerif)" : glyph-proc
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				local dfSub : DivFrame (0.75 * para.advanceScaleM) 2
				local stroke : dfSub.adviceStroke2 2 3 XH
				include : Body dfSub XH
					stroke -- stroke
					hook   -- AHook
					ada    -- [dfSub.archDepthAOf SmallArchDepth stroke]
					adb    -- [dfSub.archDepthBOf SmallArchDepth stroke]
					turned -- true
					styTop -- styTop
					styBot -- styBot
				include : RhoticHookShape (dfSub.rightSB - [HSwToV : 1.25 * markFine]) rhoticDf.width (XH * DesignParameters.eBarPos) (XH * 0.2)

			create-glyph "schwaRetroflexHook.\(suffix).\(suffixSerif)" : glyph-proc
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				local dfSub : DivFrame (0.75 * para.advanceScaleM) 2
				local stroke : dfSub.adviceStroke2 2 3 XH
				include : Body dfSub XH
					stroke -- stroke
					hook   -- AHook
					ada    -- [dfSub.archDepthAOf SmallArchDepth stroke]
					adb    -- [dfSub.archDepthBOf SmallArchDepth stroke]
					turned -- true
					styTop -- styTop
					styBot -- styBot
				include : RetroflexHook.r
					x -- [mix RightSB rhoticDf.width 0.5]
					y -- 0
					yAttach -- (XH * DesignParameters.eBarPos - HalfStroke)
					xLink -- (dfSub.rightSB - [HSwToV : 0.5 * stroke])
					refSw -- [AdviceStroke 4]

			create-glyph "cyrl/abk/Che.\(suffix).\(suffixSerif)" : glyph-proc
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				include : AbkCheShape false Body abkCheDf CAP
					hook -- Hook
					ada  -- ArchDepthA
					adb  -- ArchDepthB
					styTop -- styTop
					styBot -- styBot
			create-glyph "cyrl/abk/che.\(suffix).\(suffixSerif)" : glyph-proc
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				include : AbkCheShape false Body abkCheDf XH
					hook -- AHook
					ada  -- SmallArchDepthA
					adb  -- SmallArchDepthB
					styTop -- styTop
					styBot -- styBot
			create-glyph "cyrl/abk/CheDescender.\(suffix).\(suffixSerif)" : glyph-proc
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				include : AbkCheShape true Body abkCheDf CAP
					hook -- Hook
					ada  -- ArchDepthA
					adb  -- ArchDepthB
					styTop -- styTop
					styBot -- styBot
			create-glyph "cyrl/abk/cheDescender.\(suffix).\(suffixSerif)" : glyph-proc
				set-width 0
				set-mark-anchor 'cvDecompose' 0 0
				include : AbkCheShape true Body abkCheDf XH
					hook -- AHook
					ada  -- SmallArchDepthA
					adb  -- SmallArchDepthB
					styTop -- styTop
					styBot -- styBot

		select-variant "Schwa.\(suffix)" (follow -- 'cyrl/ETopSerifOnly')
		select-variant "schwa.\(suffix)" (follow -- 'cyrl/eTopSerifOnly')

		select-variant "schwaRhoticHook.\(suffix)"    (follow -- 'cyrl/eTopSerifOnly')
		select-variant "schwaRetroflexHook.\(suffix)" (follow -- 'cyrl/eTopSerifOnly')

		select-variant "cyrl/abk/Che.\(suffix)" (follow -- 'CBottomSerifOnly')
		select-variant "cyrl/abk/che.\(suffix)" (follow -- 'cBottomSerifOnly')

		select-variant "cyrl/abk/CheDescender.\(suffix)" (follow -- 'CBottomSerifOnly')
		select-variant "cyrl/abk/cheDescender.\(suffix)" (follow -- 'cBottomSerifOnly')

	select-variant 'e' 'e'
	alias 'cyrl/ie' 0x435 'e'

	CreateTurnedLetter 'turne' 0x1DD 'e' HalfAdvance (XH / 2)

	select-variant 'eOgonek'        0x119  (follow -- 'e')
	select-variant 'eRetroflexHook' 0x1D92 (follow -- 'e')
	select-variant 'eWithNotch'     0x2C78 (follow -- 'e')

	CreateSelectorVariants 'Schwa' 0x18F [Object.keys SmallEConfig] (follow -- 'eCap')
	CreateSelectorVariants 'schwa' 0x259 [Object.keys SmallEConfig] (follow -- 'e')

	CreateSelectorVariants 'schwaRhoticHook'    0x25A  [Object.keys SmallEConfig] (follow -- 'e')
	CreateSelectorVariants 'schwaRetroflexHook' 0x1D95 [Object.keys SmallEConfig] (follow -- 'e')

	select-variant 'eRev' 0x258  (follow -- 'e')
	select-variant 'eBar' 0xAB33 (follow -- 'e')

	alias 'cyrl/Schwa' 0x4D8 'Schwa'
	alias 'cyrl/schwa' 0x4D9 'schwa'

	CreateSelectorVariants 'cyrl/abk/Che' 0x4BC [Object.keys SmallEConfig] (follow -- 'eCap')
	CreateSelectorVariants 'cyrl/abk/che' 0x4BD [Object.keys SmallEConfig] (follow -- 'e')

	CreateSelectorVariants 'cyrl/abk/CheDescender' 0x4BE [Object.keys SmallEConfig] (follow -- 'eCap')
	CreateSelectorVariants 'cyrl/abk/cheDescender' 0x4BF [Object.keys SmallEConfig] (follow -- 'e')

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/e' 0x1D556 : glyph-proc
		include : MarkSet.e
		include : SmallEShape [DivFrame 1] XH
			stroke -- BBS
			hook   -- AHook
			bbd    -- BBD
			ada    -- SmallArchDepthA
			adb    -- SmallArchDepthB
		include : intersection
			OShapeOutline.NoOvershoot XH 0 SB RightSB BBS
			union
				VBar.l ((SB + OX) + BBD) 0 XH BBS
				VBar.r ((RightSB - OX) - BBD) (XH * DesignParameters.eBarPos) XH BBS
